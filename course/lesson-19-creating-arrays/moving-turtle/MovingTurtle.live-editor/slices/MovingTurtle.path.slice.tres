[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://course/lesson-19-creating-arrays/moving-turtle/MovingTurtle.live-editor/scripts/MovingTurtle.gd.tres" type="Resource" id=1]
[ext_resource path="res://addons/gdscript-slice-exporter/collections/SliceProperties.gd" type="Script" id=2]
[ext_resource path="res://course/lesson-19-creating-arrays/moving-turtle/MovingTurtle.live-editor/scene/MovingTurtle.tscn.tres" type="Resource" id=3]

[resource]
script = ExtResource( 2 )
scene_properties = ExtResource( 3 )
script_properties = ExtResource( 1 )
leading_spaces = 0
keyword = "EXPORT"
closing = false
name = "path"
is_full_file = false
start = 15
end = 17
lines_before = [ "extends Node2D", "", "export var board_size := Vector2(6, 4) setget set_board_size", "export var cell_size := Vector2(80, 80)", "export var line_width := 4", "export var draw_cell_coordinates := false", "", "var board_size_px := cell_size * board_size", "", "# Maps nodes to grid positions", "onready var units: Dictionary setget set_units", "", "var _label_container := Control.new()", "var _is_start = true", "" ]
lines_after = [ "", "", "func _ready() -> void:", "	_label_container.show_behind_parent = true", "	add_child(_label_container)", "	set_units({", "		$Turtle: Vector2(0, 0),", "		$Robot: Vector2(5, 3),", "		$RocksGems: Vector2(2, 0),", "		$RocksShield: Vector2(4, 2),", "		$RocksGems2: Vector2(4, 3),", "		$RocksShield2: Vector2(1, 3)", "	})", "	yield(get_tree().create_timer(0.05), \"timeout\")", "	_is_start = false", "", "", "func _run():", "	update()", "	yield(get_tree().create_timer(0.5), \"timeout\")", "	Events.emit_signal(\"practice_run_completed\")", "", "", "# Draws a board grid centered on the node", "func _draw() -> void:", "	for x in range(board_size.x):", "		for y in range(board_size.y):", "			draw_rect(Rect2(Vector2(x, y) * cell_size - board_size_px / 2.0, Vector2.ONE * cell_size), Color.white, false, line_width)", "	draw_path(turtle_path)", "", "	if draw_cell_coordinates:", "		for label in _label_container.get_children():", "			label.queue_free()", "", "		for x in board_size.x:", "			for y in board_size.y:", "				var cell = Vector2(x, y)", "				var label = Label.new()", "				label.text = str(cell)", "				_label_container.add_child(label)", "				label.rect_position = calculate_cell_position(cell) - label.rect_size / 2.0", "", "", "func draw_path(cells: Array):", "	if _is_start or not cells:", "		return", "	var points = PoolVector2Array()", "	var top_left_cell = calculate_cell_position(Vector2.ZERO)", "	if not cells.front().is_equal_approx(top_left_cell):", "		points.append(top_left_cell)", "	for cell in cells:", "		points.append(calculate_cell_position(cell))", "", "	draw_polyline(points, Color(\"fff540\"), line_width)", "", "", "func set_units(new_value: Dictionary):", "	units = new_value", "", "	for unit in units:", "		var cell: Vector2 = units[unit]", "		unit.position = calculate_cell_position(cell)", "", "", "func calculate_cell_position(cell: Vector2):", "	return cell * cell_size - board_size_px / 2.0 + cell_size / 2.0", "", "", "func set_board_size(new_size: Vector2):", "	board_size = new_size", "", "", "", "" ]
lines_editable = [ "var turtle_path = [Vector2(1, 0), Vector2(1, 1), Vector2(2, 1), Vector2(3, 1), Vector2(4, 1), Vector2(5, 1), Vector2(5, 2), Vector2(5, 3)]" ]
